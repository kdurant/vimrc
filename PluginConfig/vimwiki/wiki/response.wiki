{{{class="brush:c++"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

//-------------------------------------------------------------------------
//function		:   gain
//description	:
//input			:   b[]: Filter denominator polynomial coefficients
//                  a[]: Filter numerator polynomial coefficients
//                  m: The order of the denominator polynomial filter
//                  n: The order of the nominator polynomial filter
//                  len: The length of the frequency response
//                  x: sign=0, storing the real of filter frequency response
//                     sign=1, storing the amplitude of filter frequency response
//                     sign=2, use dB
//                  x: sign=0, storing the imaginary of filter frequency response
//                     sign=1, storing the phase of filter frequency response
//                     sign=2, use dB
//                  sign: sign=0, calculate the real of filter frequency response
//                        and the imaginary of filter frequency response
//                        sign=1, calculate the amplitude frequency response
//                        and the phase frequency response
//                        sign=2, use dB, the same as the "sign=1"
//return		:
//others		:
//-------------------------------------------------------------------------
void gain(double b[], double a[], int m, int n, double x[], double y[], int len, int sign)
{
    int i, k ;
    double ar, ai, br, bi, zr, zi, im, re, den, numr, numi, freq, temp ;

    for( k = 0; k < len; k++ )
    {
        freq = k * 0.5 / (len - 1) ;
        zr = cos(-8.0 * atan(1.0) * freq) ;
        zi = sin(-8.0 * atan(1.0) * freq) ;
        br = 0.0 ;
        bi = 0.0 ;
        for( i = m; i > 0; i-- )
        {
            re = br ;
            im = bi ;
            br = (re + b[i]) * zr - im * zi ;
            bi = (re + b[i]) * zi + im * zr ;
        }

        ar = 0.0 ;
        ai = 0.0 ;
        for( i = n; i > 0; i-- )
        {
            re = ar ;
            im = ai ;
            ar = (re + a[i]) * zr - im *zi ;
            ai = (re + a[i]) * zi + im *zr ;
        }
        br = br + b[0] ;
        ar = ar + 1.0 ;
        numr = ar * br + ai * bi ;
        numi = ar * bi - ai * br ;
        den = ar * ar + ai * ai ;
        x[k] = numr / den ;
        y[k] = numr / den ;

        switch (sign)
        {
            case 1 :
                temp = sqrt(x[k] * x[k] + y[k] * y[k]) ;
                y[k] = atan2(y[k], x[k]) ;
                x[k] = temp ;
                break ;
            case 2 :
                temp = sqrt(x[k] * x[k] + y[k] * y[k]) ;
                y[k] = atan2(y[k], x[k]) ;
                x[k] = 10.0 *log10(temp) ;
            default:
                break ;
        }
    }
}

int main(int argc, char *argv[])
{
    int i ;
    double a[] = {1.0, 0.0, 0.9} ;
    double b[] = {0.0, -0.1} ;
    double f, x[300], y[300] ;
    FILE *fp ;

    setbuf(stdout,NULL);	//display infomation when use eclipse debug
    gain(b, a, 1, 2, x, y, 300, 1) ;
    if( (fp = fopen("gainam.dat", "w")) == NULL )
    {
        puts("Can not open file gainam.dat !") ;
        exit(0) ;
    }
    for( i = 0; i < 300; i++ )
    {
        f = i * 0.5 / 299 ;
        printf( "%lf\t%lf\n", f, x[i]) ;
        fprintf(fp, "%lf\t%lf\n", f, x[i]) ;
    }
    fclose(fp) ;

    if( (fp = fopen("granph.dat", "w")) == NULL)
    {
        puts("Can not open file granph.dat !") ;
        exit(0) ;
    }
    for( i = 0; i < 300; i++ )
    {
        f = i * 0.5 / 299 ;
        printf( "%lf\t%lf\n", f, x[i]) ;
        fprintf(fp, "%lf\t%lf\n", f, y[i]) ;
    }
    fclose(fp) ;
    return 0 ;
}
}}}

