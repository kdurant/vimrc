= 概念 =
先进先出,和FIFO相似

= 定义数据类型 =
{{{class="brush:c++"
typedef struct node
{
    Item item ;
    struct node *next ;
} Node ;

typedef struct queue
{
    Node * front ;
    Node * rear ;
    int items ;
} Queue ;
}}}

= 声明 =
{{{class="brush:c++"
Queue line ;
//
}}}

= 初始化 =
队列至少有个头节点成员,所以需要初始化
->运算符,通过地址访问结构体成员
虽然front和rear是指向Node *的指针的指针变量,但和普通的成员一样访问
{{{class="brush:c++"
void InitializeQueue(Queue *pq)
{
    pq->front = pq->rear = NULL ;
    pq->items = 0 ;
}
}}}

= 增加成员 =
流程: 
    1.判断队列是已满
    2.申请内存空间
    3.给节点赋值,并给节点的指针赋值
{{{class="brush:c++"
bool EnQueue(Item item, Queue *pq)
{
    Node* pnew ;
    if(QueueIsFull(pq))
    {
        return false ;
    }

    pnew = (Node *)malloc(sizeof(Node)) ;

    if(pnew == NULL)
    {
        fprintf(stderr, "Unable to allocate memory!\n") ;
        exit(1) ;
    }
    pnew->item = item ;
    pnew->next = NULL ;
    
    if(QueueIsEmpty(pq))
    {
        pq->front = pnew ;
    }
    else
    {
        pq->rear->next = pnew ;
    }
    pq->rear = pnew ;
    pq->items++ ;
    return true ;
}

}}}
