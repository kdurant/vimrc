向函数传递的指针有4种:
1.指向非常量数据的非常量指针(non-constant pointer to non-constant data)
    具有最高的访问权限。程序可以通过解引用指针来改写该指针指向的存储单元中的数据
    ，同时，指针也可以被改写，使其指向其他的数据项。声明中不包含const
2.指向非常量数据的常量指针(constant pointer to non-constant data)
    可以被改写，使其指向相应的数据项，但是它指向的数据项是不能被改写的。这样的
    指针可以接受的函数实参是一个数据，在被调用函数中可以处理数组的每个元素，但
    是不能改写数组元素的值。
    eg.
    void printCharaters(const char *sPtr) ;

    int main()
    {
        printCharaters(string);
    }
3.指向常量数据的非常量指针(non-constant pointer to constant data)
    指向的内存空间总是不变的，而存储在这个内存空间中的数据可以通过指针来改写。
    数据名的默认类型就是这种指针。
    eg.
    int * const ptr = &x;
    ptr = &y; //error: ptr is const; can't assign new address
4.指向常量数据的常量指针(constant pointer to constant data)
    只有最小的访问权限。这样的指针所指向的内存空间是不变的，并且该内存空间中的
    数据也是不能被改写的。当一个函数中的数组元素值只能被读取而不能被改写时，就
    必须使用这样的指针来将数组传递给函数


