snippet st "string"
${1:name} = "${2:string}"
endsnippet

snippet table "[key] -> value"
${1:name} = {${2}}
endsnippet

snippet pr	"print( ... )"
print(${1:statements})
endsnippet

snippet if	"if ... then"
if ${1:condition} then
	${2:--statements}
else
end
endsnippet

snippet el	"elseif ... then"
elseif ${1:condition} then
	${2:--statements}
endsnippet

snippet whlie	"whlie ... do"
while ${1:condition} do
	${2:--statements}
end
endsnippet

snippet repeat	"repeat ... until"
repeat
	${1:--statements}
until ${2:condition}
endsnippet

snippet for	"numeric for loop"
for ${1:variable} = ${2:start}, ${3:end}, ${4:step} do
	${5:--statements}
end
endsnippet

snippet fori "ipair for loop" b
for ${1:idx}, ${2:val} in ipairs(${3:table_name}) do
	${4:--statements}
end
endsnippet

snippet forp "pair for loop" b
for ${1:key} in pairs(${3:table_name}) do
	${4:--statements}
end
endsnippet

snippet do	"do ... end"
do
	${1:--block}
end
endsnippet

snippet fun	"normal function"
--foo = function(x) return 2*x end
function ${1:name}(${2:args})
	${3:--statements}
	return
end
endsnippet

snippet funa	"anonymous function"
${1:name} = function ()
	${2:--statements}
	return
end
endsnippet

snippet funv "variable function" !b
function ${1:name}(...)
	--local variable
    for idx,val in ipairs{...} do
	--
	end
	--return variable
endsnippet
