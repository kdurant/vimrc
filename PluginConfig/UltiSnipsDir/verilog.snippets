extends fpga

snippet alrst  "always clk and rst_n"
always @ (posedge ${1:clk} or negedge ${2:rst_n})
begin
    ${3:/*code*/}
end
endsnippet

snippet al      "always clk"
always @ (posedge ${1:clk})
begin
    ${2:/*code*/}
end
endsnippet

snippet in      "input       port"
input                       ${1:port},
endsnippet

snippet inb     "input      [MSB:0] port"
input        [${1:MSB}:00]        ${2:port},
endsnippet

snippet our    "output port"
output  reg                 ${1:port},
endsnippet

snippet ourb    "reg  [MSB:0] variable"
output  reg  [${1:MSB}:00]        ${2:port},
endsnippet

snippet ouw    "wire  variable"
output                      ${1:variable},
endsnippet

snippet ouwb    "wire [MSB:0] variable"
output       [${1:MSB}:00]        ${2:variable},
endsnippet

#reg
snippet reg
reg                         ${1:outport};
endsnippet

snippet regb
reg     [${1:MSB}:00]             ${2:outport};
endsnippet

#wire
snippet wi      "wire   port"
wire                        ${1:port};
endsnippet

snippet wib     "wire   [MSB:0] port"
wire    [${1:MSB}:00]             ${2:port};
endsnippet

snippet shift_in_high   "first data in high"
${1:new_data}[7:0] <= {$1[${2:6}:${3:0}], ${4:data_in}};             // 最先进来的数据在最高位
endsnippet

snippet shift_in_low   "first in in low"
${1:new_data}[7:0] <= {${3:data_in}, $1[${2:7}:${4:1}]};             // 最先进来的数据在最低位
endsnippet

snippet shift_out_high   "High bit first go out"
/* 需要其他地方不断给 data_in_reg 赋值，例如
if(load)
    ${1:data_in_reg} <= data_in
else
*/
begin
    $1 <= ($1 << 8);
    ${2:data_out} <= $1[31:24]
end
endsnippet

snippet shift_out_low   "low bit first go out"
/* 需要其他地方不断给 data_in_reg 赋值，例如
if(load)
    ${1:data_in_reg} <= data_in
else
*/
begin
    $1 <= ($1 >> 8);
    ${2:data_out} <= $1[07:00]
end
endsnippet

snippet mem     "reg [7:0] mem[0:255]"
reg     [7:0]           mem[0:255];
endsnippet

snippet task        "task templet"
task ${1:/*task_name*/};
    ${2:/*port declaration*/}
    begin
        ${3:/*code*/}
    end
endtask
endsnippet

snippet hr      "reset task"
task reset;
input   [7:0]   low_time;
begin
    rst = 1'b1;
    wait (clk !== 1'bx);
    @ (negedge clk);
    rst <= 1'b0;
    repeat(low_time)
        @ (negedge clk);
    rst <= 1'b1;
end
endtask
endsnippet

snippet fun     "function templet"
function ${1:/*return_type_or_scope*/} ${2:/*function_name*/}
    ${3:/*port declaration*/}
    begin
        ${3:/*code*/}
    end
endfunction
endsnippet

#system function or task
#readmemh
snippet readmemh    "read file data to memory"
reg     [7:0]   DataMem[0:31];
$readmemh("${1:/*data.txt*/}",${2:/*DataMem*/});
endsnippet

#random
snippet random
${1:veriable} = ({$random} % ${2:2});
endsnippet

#strobe
snippet strobe
$strobe("${1:veriable} = 0${2:x}%${3:h}",$1);
endsnippet

#strobe
snippet monitor
$monitor($time,"${1:veriable} = 0${2:x}%${3:h}",$1);
endsnippet

#fdisplay, write data to file
snippet fdisplay "$fdisplay() function"
$fdisplay(${1:handle},"${2:veriable} = 0${3:x}%${4:h}",$2);
endsnippet

#test
snippet st  "three state machine"
reg     [3:0]           current_state, next_state;
reg     [15:0]          state_cnt;
localparam              sIdle_state = 0;
//-------------------------------------------------------------------------
//next_state滞后于current_state一个周期
//-------------------------------------------------------------------------
always @ (posedge ${1:clk} or negedge ${2:rst})         // build the state flops
begin
    if(~rst)
        current_state       <= ${3:sIdle_state};
    else
        current_state       <= ${4:next_state};
end

//-------------------------------------------------------------------------
//second.state transfer
//-------------------------------------------------------------------------
always @ ( * )      //state machine, block assign
begin
    case(current_state)
        sIdle_state:
        begin
            if(/*xx*/)
                next_state = /*xx_state*/;
            else
                next_state = current_state;
        end
        default: next_state = sIdle_state;
    endcase
end

//-------------------------------------------------------------------------
//three.output
//-------------------------------------------------------------------------
always @ (posedge $1 or negedge $2)     //output
begin
    if(~rst)
    begin
    end
    else
    begin
        case(next_state)
            sIdle_state:
            begin
            end
            default:
            begin
            end
        endcase
    end
end

/*
 * 状态跳转计数器
 */
always @ (posedge clk or negedge rst)
begin
    if(~rst)
        state_cnt <= 0;
    else if (next_state != current_state)
        state_cnt <= 0;
    else
        state_cnt <= state_cnt + 1'b1;
end
endsnippet

snippet sync        "signal sync"
module sync
(
    input   wire                clk,
    input   wire                rst,

    input   wire                sig_in,
    output  reg                 sig_out
);

reg                     sig_reg;
always @ (posedge clk or negedge rst)
begin
    if(~rst)
    begin
        sig_out <= 0;
        sig_reg <= 0;
    end
    else
    begin
        sig_reg <= sig_in;
        sig_out <= sig_reg;
    end
end
endmodule
endsnippet

snippet prune
/* synthesis noprune */
endsnippet

snippet keep    "altera format"
/* synthesis keep */
endsnippet

snippet keep    "xilinx format"
(* KEEP = "TRUE" *)
endsnippet

snippet fopen    "open file"
integer ${1:name};
initial
begin
    $1 = $fopen("${2:file}.txt");
    $fmonitor($1, "%h %t", ${3:variable}, $time);
    $fclose($1);
end
endsnippet

snippet state   "one hot encode machine state"
localparam              IDLE    = 0;
localparam              OVER    = 1;
(* KEEP = "TRUE" *)reg     [OVER:00]       cs = 'd1, ns = 'd1;
reg     [15:00]         state_cnt, state_cnt_n;

// synthesis translate_off
reg [127:0] cs_STRING;
always @(*)
begin
    case(1'b1)
        cs[IDLE]: cs_STRING = "IDLE";
        cs[HEAD]: cs_STRING = "HEAD";
        default: cs_STRING = "XXXX";
    endcase
end
// synthesis translate_on

always @(posedge clk)
begin
    if(rst)
        cs <= 'd1;
    else
        cs <= ns;
end

always @(*)
begin
    ns = 'd0;
    case(1'b1)
        cs[IDLE]:
        begin
            if(/*condition*/)
                ns[/*next_state*/] = 1'b1;
            else
                ns[IDLE] = 1'b1;
        end
        cs[HEAD]:
        begin
            if(/*condition*/)
                ns[/*next_state*/] = 1'b1;
            else
                ns[HEAD] = 1'b1;
        end
        default:
            ns[IDLE] = 1'b1;
    endcase
end


always @ (posedge clk)
begin
    if(rst)
    begin
    end
    else
    begin
        case (1'b1)
            ns[IDLE]:
            begin
                /*code*/
            end
            /*code*/
            default:
            begin
                /*code*/
            end
        endcase
    end
end

always @ (posedge clk or negedge rst)
begin
    if(~rst)
        state_cnt <= 0;
    else
        state_cnt <= state_cnt_n;
end

always @ (*)
begin
    if(~rst)
        state_cnt_n <= 0;
    else if (cs != ns)
        state_cnt_n <= 0;
    else
        state_cnt_n <= state_cnt + 1'b1;
end
endsnippet

