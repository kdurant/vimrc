extends verilog

snippet array "fixed width"
${1:int} name[0:${2:row}];
endsnippet

snippet array_mul "fixed width"
${1:int} name[0:${2:row}][0:${3:col}];
endsnippet

snippet queue

${1:int} ${2:name}[$] ${3:= {3,4}};

endsnippet

snippet interface
// vmm rule 4-4 -- interfaces shall be packaged into the same files as the
// transactors that use them
interface ${1:name_if}
(
	// input wire clk,
	// input wire reset
);
	timeunit 1ns;
	timeprecision 100ps;

	// imports
	// import pkg::*;

	parameter hold_time = 2;     // timeunit is 1ns
	parameter setup_time = 2;    // change timing values as per requirement

	// Clocking Blocks
	// just type clocking and tab to invoke snippet

	// Modports
	// just type modport and tab to invoke snippet

endinterface: $1
endsnippet

snippet modport
modport ${1:name_mp}
(${2}
// clocking clocking_cb,
// input input_name,
// output output_port,
// ....
);
endsnippet

snippet alff "combination logic" !b

endsnippet

snippet alcomb "sequential logic" !b

endsnippet

snippet allatch "D latch" !b

endsnippet

snippet enum
enum ${1:/*[optional data type]*/}
{
	${2:/*name1 = value1*/,}
} ${3:var_name};
endsnippet

snippet tde
typedef enum
{
    /*data*/,
}${1:/*struct*/}_e;
endsnippet

snippet tds
typedef struct //packed unsigned
{
    /*data*/;
}${1:/*struct*/}_s;
endsnippet

snippet tdu
typedef union
{
    /*data*/;
}${1:/*struct*/}_u;
endsnippet

snippet foreach
	foreach(${1:name}[${2:index}])
endsnippet

snippet fork
initial
begin
	fork
		begin
		${1:/*code_block1()*/}
		end
		begin
		/*code_block2()*/
		end
	join/*_any or _none*/
end
endsnippet

snippet class
class ${1:class_name} extends ${2:base_class};
	/*class property*/
	$2
	/*class method*/
	function new(/*parameter*/);
		/*属性初值*/
	endfunction
endclass:$1
endsnippet

snippet clocking
clocking ${1:name} (posedge clk);
	//default input #1ns output #1ns
endclocking
endsnippet

snippet logic
logic					${1:inport};
endsnippet

snippet logicb
logic	[${1:MSB}:0]           ${2:inport};
endsnippet

snippet package
package ${1:name}
endpackage
endsnippet

snippet assert
assert("condition")
else
	$error("failed");
endsnippet

