# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

##############
# NICE BOXES #
##############
global !p
import string, vim

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def _parse_comments(s):
    """ Parses vim's comments option to extract comment format """
    i = iter(s.split(","))

    rv = []
    try:
        while True:
            # get the flags and text of a comment part
            flags,text = i.next().split(':', 1)

            if len(flags) == 0:
                if len(text) == 1:
                    rv.append((text,text,text, ""))
            # parse 3-part comment, but ignore those with O flag
            elif flags[0] == 's' and 'O' not in flags:
                ctriple = []
                indent = ""

                if flags[-1] in string.digits:
                    indent = " " * int(flags[-1])
                ctriple.append(text)

                flags,text = i.next().split(':', 1)
                assert(flags[0] == 'm')
                ctriple.append(text)

                flags,text = i.next().split(':', 1)
                assert(flags[0] == 'e')
                ctriple.append(text)
                ctriple.append(indent)

                rv.append(ctriple)

            elif flags[0] == 'b':
                if len(text) == 1:
                    rv.insert(0, (text,text,text, ""))

    except StopIteration:
       return rv

def _get_comment_format():
    """ Returns a 4-element tuple representing the comment format for
    the current file. """

    ft = vim.eval("&filetype")
    # check if the comment dict has the format for the current file
    if _commentDict.has_key(ft):
        return _commentDict[ft]

    # otherwise parse vim's comments and add it for later use
    commentformat = _parse_comments(vim.eval("&comments"))[0]
    _commentDict[ft] = commentformat

    return commentformat


def make_box(twidth, bwidth=None):
    b, m, e, i = _get_comment_format()
    bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
    sline = b + m + bwidth_inner * m + 2 * m
    nspaces = (bwidth_inner - twidth) // 2
    mlines = i + m + " " + " " * nspaces
    mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
    eline = i + 2 * m + bwidth_inner * m + m + e
    return sline, mlines, mlinee, eline

def foldmarker():
    "Return a tuple of (open fold marker, close fold marker)"
    return vim.eval("&foldmarker").split(",")

endglobal

##########################
# LOREM IPSUM GENERATORS #
##########################
snippet lorem "Lorem Ipsum - 50 Words" b
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.
endsnippet

snippet da
`!v strftime("%Y-%m-%d")`
endsnippet

#snippet //
#//-------------------------------------------------------------------------
#endsnippet

snippet ///
/*-------------------------------------------------------------------------
//${1:comment}
-------------------------------------------------------------------------*/
endsnippet

snippet {
{
    ${1:/*context*/}
}
endsnippet

snippet } "a" i
{${1:contidion}}
endsnippet

snippet ( "a" i
(${1:contidion})
endsnippet

snippet [ "a" i
[${1:number}]
endsnippet

snippet < "a" i
<${1:context}>
endsnippet

snippet ' "a" i
'${1:string}'
endsnippet

snippet " "a" i
"${1:string}"
endsnippet

snippet | "a" i
|${1:string}|
endsnippet
# vim:ft=snippets:

snippet ex
`!v expand("%:t")`
endsnippet

snippet #
#				$1
endsnippet

snippet git
*.pdf
*.doc
*.docx
*.rar
*.txt
*.html
*.jpg
*.chm
*.log
*.xml
tmp*
endsnippet

snippet modelsim
work
*.mpf
*.mti
*.wlf
*.vstf
wlf*
transcript
virtuals.do
wave.do
endsnippet

snippet quartus
db
greybox_tmp
incremental_db
output_files
simulation
*.qws
*.ddb
*.xml
*.csv
*.wlf
*.bak
*.tmp2
*1.v
*.html
*.xml
*.rpt
*.stp
*.echo
*.done
*.smsg
*.summary
*.jdi
*.qdf
endsnippet

snippet all
*
!*/
*.*
!*.c
endsnippet

snippet iar
doc
sch
Documentation

Exe
List
Obj
settings

*.dep
*.ewd
*.ewt
*.dep
*.tmp

*.map
*.html
*.rtf
*.hex
*.out

cscope.files
cscope.out
tags

*.vpwhist
*.vtg
endsnippet

snippet vivado
.Xil
*.cache
*.hw
*.runs
# IP选项改变可以重新生成
*.ip_user_files
*.tmp

*.jou
*.log
*.str
*.sh
*.udo
*.f
*.do

ies
questa
vcs
xsim

# IP一般情况下只需要xci文件，vivado就可以重新生成
doc
hdl
sim
simulation
synth
*.veo
*.vho
*.xdc
*.xml
endsnippet

snippet ise "myself" 
_xmsgs
iseconfig
_ngo
xlnx_auto_0_xdb
xst

*.bgn
*.bit
*.blc
*.bld
*.csv
*.cmd_log
*.drc
*.debug
*.gise
*.html
*.log
*.lso
*.map
*.mrp
*.map
*.ncd
#*.ngc
*.ngd
*.ngm
*.ngr
*.pad
*.par
*.pcf
*.prj
*.ptwx
*.stx
*.syr
*.twr
*.twx
*.unroutes
*.ut
*.xtl
*.xml
*.xpi
*.xrpt
*.xst
*.xwbt
*.txt
*.cpj

impact.xsl

# IP 文件夹
*.cgp
*.asy
*.ncf
*.sym
*.veo
tmp
# IP 文件夹
doc
#example_design  部分IP需要这个文件夹
implement
simulation
endsnippet

snippet ise "github"
# intermediate build files
*.bgn
*.bit
*.bld
*.cmd_log
*.drc
*.ll
*.lso
*.msd
*.msk
*.ncd
*.ngd
*.ngr
*.pad
*.par
*.pcf
*.prj
*.ptwx
*.rbb
*.rbd
*.stx
*.syr
*.twr
*.twx
*.unroutes
*.ut
*.xpi
*.xst
*_bitgen.xwbt
*_envsettings.html
*_map.map
*_map.mrp
*_map.ngm
*_map.xrpt
*_ngdbuild.xrpt
*_pad.csv
*_pad.txt
*_par.xrpt
*_summary.html
*_summary.xml
*_usage.xml
*_xst.xrpt

# iMPACT generated files
_impactbatch.log
impact.xsl
impact_impact.xwbt
ise_impact.cmd
webtalk_impact.xml

# Core Generator generated files
xaw2verilog.log

# project-wide generated files
*.gise
par_usage_statistics.html
usage_statistics_webtalk.html
webtalk.log
webtalk_pn.xml

# generated folders
iseconfig/
xlnx_auto_0_xdb/
xst/
_ngo/
_xmsgs/
endsnippet

snippet vivado1
#########################################################################################################
##	This is an example .gitignore file for Vivado, please treat it as an example as 
##	it might not be complete. In addition, XAPP 1165 should be followed.
#########################################################################################################
#########
#Exclude all
#########
*
!*/
!.gitignore
###########################################################################
##	VIVADO
###########################################################################
#########
#Source files:
#########
#Do NOT ignore VHDL, Verilog, block diagrams or EDIF files.
!*.vhd
!*.v
!*.bd
!*.edif
#########
#IP files
#########
#.xci: synthesis and implemented not possible - you need to return back to the previous version to generate output products
#.xci + .dcp: implementation possible but not re-synthesis
#*.xci(www.spiritconsortium.org)
!*.xci
#*.dcp(checkpoint files)
!*.dcp
!*.vds
!*.pb
#All bd comments and layout coordinates are stored within .ui
!*.ui
!*.ooc
#########
#System Generator
#########
!*.mdl
!*.slx
!*.bxml
#########
#Simulation logic analyzer
#########
!*.wcfg
!*.coe
#########
#MIG
#########
!*.prj
!*.mem
#########
#Project files
#########
#XPR  +  *.XML ? XPR (Files are merged into a single XPR file for 2014.1 version)
#Do NOT ignore *.xpr files
!*.xpr
#Include *.xml files for 2013.4 or earlier version
!*.xml
#########
#Constraint files
#########
#Do NOT ignore *.xdc files
!*.xdc
#########
#TCL - files
#########
!*.tcl
#########
#Journal - files
#########
!*.jou
#########
#Reports
#########
!*.rpt
!*.txt
!*.vdi
#########
#C-files
#########
!*.c
!*.h
!*.elf
!*.bmm
!*.xmp
endsnippet

snippet python
.idea
.vscode
__pycache__

*.txt
*.bin

tmp*
test.py
demo.py

*.xml
*.iml
*.ini
*.log

build*
dist
*.spec
endsnippet


snippet nios
# qsys 文件存放于sopc文件夹下，其他文件都可以从此文件生成
# qsys 命名为kernel.qsys

.qsys_edit
kernel
*.bsp
*.cmp
*.html
*.rpt
*.sopcinfo
tags

*.d
obj
*.elf
*.map
*.objdump
*.html
*.mk
*.gdb
*.a
endsnippet
