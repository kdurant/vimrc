snippet de
abbr 

snippet main



snippet #inc
abbr #include <stdio.h>

snippet #in
abbr #include "stdio.h"

snippet #de
abbr #define	TEST

snippet #ifd
abbr #define    #ifdef

snippet #if
abbr #if    #endif

snippet if
abbr if()   {}

snippet el
abbr else{}

snippet ei
abbr else if()  {}

snippet ?
abbr a ? expr1 : expr2

snippet do
abbr do{}   while()

snippet wh
abbr while()    {}

snippet for
abbr for()  {}


snippet fun
abbr function define

snippet fund
abbr function declare

snippet st
abbr struct name{}

snippet un
abbr union name{}

snippet td
abbr typedef int MyCustomType
snippet tds
abbr typedef struct name{} 

snippet tde
abbr typedef enum name{}


snippet sw
abbr switch () {}

snippet puts
abbr puts("string") ;

snippet gets
abbr gets(string) ;

snippet printf
printf("%d\n", variable}) ;

snippet scanf
scanf("%d",&num) ;

snippet fopen
FilePoint *fopen("FileName", "OpenType") ;

snippet fclose
fclose(FilePoint) ;

snippet fputc
fputc('char',FilePoint ;

snippet fgetc
char = fgetc(FilePoint) ;

snippet fputs
fputs('string',FilePoint ;

snippet fgets
string = fgets(FilePoint) ;

snippet fprintf
fprintf(FilePoint, "format", "${3:}") ;

snippet fscanf

snippet feof

snippet ferror

snippet rewind

snippet remove

snippet fread

snippet fwrite

snippet malloc
point = (int *)malloc(sizeof($2)) ;

snippet strcpy
strcpy(desin, source) ;

snippet strcat
strcat(desin, source) ;

snippet strchr
strchr(string, 'char') ;

snippet strcmp
strcmp(string1, string2) ;

snippet strncmpi

snippet strcspn

snippet strdup

snippet stricmp

snippet strerror

snippet strcmpi

snippet strncmp

snippet strncpy

snippet strnicmp

snippet strnset

snippet strpbrk

snippet strrchr

snippet strrev

snippet strset

snippet strspn

snippet strstr

snippet strtod

snippet strtok

snippet strtol

snippet strupr

snippet swab

snippet	rand
rand_num = rand() % maxnum ;
snippet setbuf
setbuf(stdout,NULL);	//display infomation when use eclipse debug

snippet #ing
#include <gtk/gtk.h>

snippet gtk_init
gtk_init(&argc, &argv) ;

snippet gtk_window_new
gtk_window_new(GTK_WINDOW_TOPLEVEL) ;

snippet gtk_window_set_title
gtk_window_set_title(${1:GTK_WINDOW(window)}, "string") ;

snippet g_signal_connect
g_signal_connect(G_OBJECT(window), "${2:signal name}", G_CALLBACK(gtk_main_quit), NULL) ;

snippet  g_signal_connect_swapped
g_signal_connect_swapped(G_OBJECT(button), "clicked", G_CALLBACK(gtk_widget_destroy), (gpointer)window ) ;

snippet gtk_label_new
gtk_label_new(string) ;

snippet gtk_container_add
gtk_container_add (GTK_CONTAINER (window), button);

snippet destroy
static void destroy(GtkWidget* window, gpointer data)
{
	gtk_main_quit() ;
}

snippet destroy_event
static gboolean delete_event(GtkWidget* window, GdkEvent* event, gpointer data)
{
	return FALSE ;
}

snippet builder
GtkBuilder *builder ;
builder = gtk_builder_new() ;
gtk_builder_add_from_file(builder, "${1:D:/tmp/gtk/test}.glade", NULL);				//read glade file
window = GTK_WIDGET(gtk_builder_get_object(builder, "window"));
g_object_unref(G_OBJECT(builder));



snippet ss "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
${0: data }
};

