snippet co "function comment"
/**************************************************************************
 * Function     : ${1}
 * Description  :
 * Input        :
 * Return       :
 * Others       :
 *************************************************************************/
endsnippet

snippet head "file head"
/*
 * @file `!v expand('%')`
 * @brief$1
 * @author kdurant
 * @version v1.0
 * @date `!v strftime("%Y-%m-%d")`
 */
endsnippet

snippet //
/*!< $1 */
endsnippet

snippet br
/**
  * @brief $1
  */
endsnippet

snippet dox "function comment"
/**
  * @brief  ${1}
  * @param
  * @note
  * @retval
  */
endsnippet

snippet title
/**
  ******************************************************************************
  * @file    `!v expand('%')`
  * @author  kdurant
  * @version V1.0.0
  * @date
  * @brief
  * @par Copyright
  ******************************************************************************
  */
endsnippet

snippet /*
/*
 * ${1}
 */
endsnippet

snippet main
int main(void)
{
    ${1:/*code*/}

    return 0;
}
endsnippet


snippet #inc    "include<...> "
#include <${1:stdio}.h>
endsnippet

snippet #in "include'...'"
#include "${1:stdio}.h"
endsnippet

snippet #de "#define ..."
#define ${1:TEST}
endsnippet

snippet #if "#if ... #endif"
#if ${1:DEBUG}
    ${2:}
#endif
endsnippet

snippet #ifd    "#ifdef ... #endif"
#ifdef ${1:DEBUG}
    ${2:}
#endif
endsnippet

snippet #ifn "#ifndef ... #define ... #endif"
#ifndef `!v toupper(expand('%:r'))`_H
#define `!v toupper(expand('%:r'))`_H
/* Includes ------------------------------------------------------------------*/
$1
/* Exported constants --------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
/* Exported macro ------------------------------------------------------------*/
/* Exported Global variables -------------------------------------------------*/
/* Exported functions ------------------------------------------------------- */
#endif
endsnippet

snippet if  "if {...}"
if(${1:/*cond*/})
{
    ${2:/*code*/}
}
endsnippet

snippet el  "else {...}"
else
{
    ${1:/*code*/}
}
endsnippet

snippet ei "else if {...}"
else if(${1:/*cond*/})
{
    ${2:/*code*/}
}
endsnippet

snippet ?
${1:/*LHS*/} = ${2:/*cond*/} ? ${3:/*expr1*/} : ${4:/*expr2*/};
endsnippet

snippet do  "do ... while loop"
do
{
    ${2:/*code*/}
}
while (${1:/*cond*/});
endsnippet

snippet wh  "while loop"
while(${1:/*cond*/})
{
    ${2:/*code*/}
}
endsnippet

snippet for "for loop(for)"
for( ${1:i} = 0; $1 ${2:<} ${3:count}; $1${4:++} )
{
    ${5:/*code*/}
}
endsnippet


snippet fun "function define"
${1:void} ${2:/*function_name*/}(${3:/*parameter*/})
{
    ${4:/*code*/}
}
endsnippet

snippet fund    "function declaration"
${1:void} ${2:/*function_name*/}(${3});
endsnippet

snippet st  "struct"
struct ${1:/*struct*/}
{
    ${2:/*data*/}
};
endsnippet

snippet un  "union"
union ${1:/*union*/}
{
    ${2:/*data*/}
};
endsnippet

snippet td  "typedef"
typedef ${1:int} ${2:/*MyCustomType*/};
endsnippet

snippet tdf "typedef function point"
/*
 * typedef void (*list_op)(void*);      function point declaration
 * void print_student(void* data)       function declaration
 * void traverse(list* llist, list_op do_func)  called function declaration
 * traverse(llist, print_student);      usage
 */
typedef ${1:int} (*${2:pfun})(${3:parameter});
endsnippet

snippet tds "typedef struct"
typedef struct __${1:/*struct*/}
{
    ${2:/*data*/};
    void (*function)(struct __$1 var);   // 结构体的相关操作可以使用函数指针封装到这里
}$1_t;
//extern $1_t  var; 
// 上面的放到.h文件，下面的放到.c文件
//$1_t var = {
//  .var1 = 0x01
//}
endsnippet

snippet ist
struct ${1:type} ${2:name} =
{
    ${3:/*.member = 1,*/}
};

endsnippet

snippet tde "typedef enum"
/*
 * enum spectrum {red, orange, yellow}
 * enum spectrum color;
 * if(color == red)
 */
typedef enum __${1:name}
{
    ${2:/*data1*/} = ,
    ${3:/*data2*/} = ,
}$1_t;
endsnippet

snippet tdu "typedef union"
typedef union __${1:name}
{
    ${2:/*data1*/},
    ${3:/*data2*/}
}$1_t;
endsnippet

snippet sw  "switch ... case"
switch (${1:/*cond*/})
{
    case ${2:/*select*/} :
        break;
    default:
        break;
}
endsnippet

snippet setbuf
setbuf(${1:stdout},${2:NULL});  //display infomation when use eclipse debug
endsnippet

snippet memset  "memset(void *block, int c, size_t size)"
memset(${1:buffer}, ${2:0x00}, sizeof(${3:type})/sizeof(${4:int}));
endsnippet

snippet memcpy  "copy src to dest"
memcpy(${1:/*dest*/}, ${2:/*src*/}, ${3:size});
endsnippet

snippet memmove "copy src to dest"
memmove(${1:/*dest*/}, ${2:/*src*/}, ${3:size});
endsnippet

snippet pack
#pragma pack(push,1)
$1
#pragma pack(pop)
endsnippet

snippet decla
/* Includes ------------------------------------------------------------------*/
$1
/* Private define ------------------------------------------------------------*/
/* Private typedef -----------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Global variables ----------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
endsnippet
