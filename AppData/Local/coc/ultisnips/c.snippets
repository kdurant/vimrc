snippet tempc "simple c template"
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>

int main(void)
{
    $1

    return 0;
}
endsnippet

snippet main	"main function"
int main(void)
{
    ${1:/*code*/}

    return 0;
}
endsnippet


snippet #if "#if ... #endif"
#if ${1:DEBUG}
    ${2:}
#endif
endsnippet

snippet #ifd    "#ifdef ... #endif"
#ifdef ${1:DEBUG}
    ${2:}
#endif
endsnippet

snippet #ifn "#ifndef ... #define ... #endif"
#ifndef `!v toupper(expand('%:r'))`_H
#define `!v toupper(expand('%:r'))`_H
/* Includes ------------------------------------------------------------------*/
$1
/* Exported constants --------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
/* Exported macro ------------------------------------------------------------*/
/* Exported Global variables -------------------------------------------------*/
/* Exported functions ------------------------------------------------------- */
#endif
endsnippet

snippet ?
${1:/*LHS*/} = ${2:/*cond*/} ? ${3:/*expr1*/} : ${4:/*expr2*/};
endsnippet

snippet fun "function define"
${1:void} ${2:/*function_name*/}(${3:/*parameter*/})
{
    ${4:/*code*/}
}
endsnippet

snippet fund    "function declaration"
${1:void} ${2:/*function_name*/}(${3});
endsnippet

snippet st  "struct"
struct ${1:/*struct*/}
{
    ${2:/*data*/}
};
endsnippet

snippet un  "union"
union ${1:/*union*/}
{
    ${2:/*data*/}
};
endsnippet

snippet td  "typedef"
typedef ${1:int} ${2:/*MyCustomType*/};
endsnippet

snippet tdf "typedef function point"
/*
 * typedef void (*list_op)(void*);      function point declaration
 * void print_student(void* data)       function declaration
 * void traverse(list* llist, list_op do_func)  called function declaration
 * traverse(llist, print_student);      usage
 */
typedef ${1:int} (*${2:pfun})(${3:parameter});
endsnippet

snippet tds "typedef struct"
typedef struct __${1:/*struct*/}
{
    ${2:/*data*/};
    void (*function)(struct __$1 var);   // 结构体的相关操作可以使用函数指针封装到这里
}$1_t;
//extern $1_t  var; 
// 上面的放到.h文件，下面的放到.c文件
//$1_t var = {
//  .var1 = 0x01
//}
endsnippet

snippet ist
struct ${1:type} ${2:name} =
{
    ${3:/*.member = 1,*/}
};

endsnippet

snippet tde "typedef enum"
/*
 * enum spectrum {red, orange, yellow}
 * enum spectrum color;
 * if(color == red)
 */
typedef enum __${1:name}
{
    ${2:/*data1*/} = ,
    ${3:/*data2*/} = ,
}$1_t;
endsnippet

snippet tdu "typedef union"
typedef union __${1:name}
{
    ${2:/*data1*/},
    ${3:/*data2*/}
}$1_t;
endsnippet

snippet sw  "switch ... case"
switch (${1:/*cond*/})
{
    case ${2:/*select*/} :
        break;
    default:
        break;
}
endsnippet

snippet compare "qsort function" b
int compare(const void* a, const void* b)
{
    int arg1 = *(const int*)a;
    int arg2 = *(const int*)b;

    if(arg1 < arg2)
        return -1;
    if(arg1 > arg2)
        return 1;
    return 0;
}
endsnippet

snippet pack
#pragma pack(push,1)
$1
#pragma pack(pop)
endsnippet

snippet cmockery "simple cmockery template" b
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include "cmockery.h"


int main(int argc, char* argv[]) {
    const UnitTest tests[] = {
        unit_test($1),
    };
    return run_tests(tests);
}
endsnippet

snippet decla
/* Includes ------------------------------------------------------------------*/
$1
/* Private define ------------------------------------------------------------*/
/* Private typedef -----------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Global variables ----------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
endsnippet

snippet swapt16 "swap 16bit"
#define BSWAP_16(x)                                        \
    (unsigned short)((((unsigned short)(x)&0x00ff) << 8) | \
                     (((unsigned short)(x)&0xff00) >> 8))
endsnippet

snippet swapt32 "swap 32bit"

#define BSWAP_32(x)                                         \
    (unsigned int)((((unsigned int)(x)&0xff000000) >> 24) | \
                   (((unsigned int)(x)&0x00ff0000) >> 8) |  \
                   (((unsigned int)(x)&0x0000ff00) << 8) |  \
                   (((unsigned int)(x)&0x000000ff) << 24))
endsnippet
