snippet tempc "simple c template"
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>

int main(void)
{
    $1

    return 0;
}
endsnippet

snippet main_void	"int main(void)"
int main(void)
{
    ${1:/*code*/}

    return 0;
}
endsnippet

snippet main_arg	"int main(int argc, char *argv[])"
int main(int argc, char *argv[])
{
    ${1:/*code*/}

    return 0;
}
endsnippet

snippet #if "#if ... #endif"
#if ${1:DEBUG}
    ${2:}
#endif
endsnippet

snippet #ifd    "#ifdef ... #endif"
#ifdef ${1:DEBUG}
    ${2:}
#endif
endsnippet

snippet #ifn "#ifndef ... #define ... #endif"
#ifndef `!v toupper(expand('%:r'))`_H
#define `!v toupper(expand('%:r'))`_H
/* Includes ------------------------------------------------------------------*/
$1
/* Exported constants --------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
/* Exported macro ------------------------------------------------------------*/
/* Exported Global variables -------------------------------------------------*/
/* Exported functions ------------------------------------------------------- */
#endif
endsnippet

snippet ?
${1:/*LHS*/} = ${2:/*cond*/} ? ${3:/*expr1*/} : ${4:/*expr2*/};
endsnippet

snippet fun "function define"
${1:void} ${2:/*function_name*/}(${3:/*parameter*/})
{
    ${4:/*code*/}
}
endsnippet

snippet fund    "function declaration"
${1:void} ${2:/*function_name*/}(${3});
endsnippet

snippet st  "struct"
struct ${1:/*struct*/}
{
    ${2:/*data*/}
};
endsnippet

snippet un  "union"
union ${1:/*union*/}
{
    ${2:/*data*/}
};
endsnippet

snippet td  "typedef"
typedef ${1:int} ${2:/*MyCustomType*/};
endsnippet

snippet tdf "typedef function point"
/*
 * typedef void (*list_op)(void*);      function point declaration
 * void print_student(void* data)       function declaration
 * void traverse(list* llist, list_op do_func)  called function declaration
 * traverse(llist, print_student);      usage
 */
typedef ${1:int} (*${2:pfun})(${3:parameter});
endsnippet

snippet tds "typedef struct"
typedef struct __${1:/*struct*/}
{
    ${2:/*data*/};
    void (*function)(struct __$1 var);   // 结构体的相关操作可以使用函数指针封装到这里
}$1_t;
//extern $1_t  var; 
// 上面的放到.h文件，下面的放到.c文件
//$1_t var = {
//  .var1 = 0x01
//}
endsnippet

snippet ist
struct ${1:type} ${2:name} =
{
    ${3:/*.member = 1,*/}
};

endsnippet

snippet tde "typedef enum"
/*
 * enum spectrum {red, orange, yellow}
 * enum spectrum color;
 * if(color == red)
 */
typedef enum __${1:name}
{
    ${2:/*data1*/} = ,
    ${3:/*data2*/} = ,
}$1_t;
endsnippet

snippet tdu "typedef union"
typedef union __${1:name}
{
    ${2:/*data1*/},
    ${3:/*data2*/}
}$1_t;
endsnippet

snippet sw  "switch ... case"
switch (${1:/*cond*/})
{
    case ${2:/*select*/} :
        break;
    default:
        break;
}
endsnippet

snippet compare "qsort function" b
int compare(const void* a, const void* b)
{
    int arg1 = *(const int*)a;
    int arg2 = *(const int*)b;

    if(arg1 < arg2)
        return -1;
    if(arg1 > arg2)
        return 1;
    return 0;
}
endsnippet

snippet pack
#pragma pack(push,1)
$1
#pragma pack(pop)
endsnippet

snippet cmockery "simple cmockery template" b
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include "cmockery.h"


int main(int argc, char* argv[]) {
    const UnitTest tests[] = {
        unit_test($1),
    };
    return run_tests(tests);
}
endsnippet

snippet decla
/* Includes ------------------------------------------------------------------*/
$1
/* Private define ------------------------------------------------------------*/
/* Private typedef -----------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Global variables ----------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
endsnippet

snippet swap16 "swap 16bit"
#define BSWAP_16(x)                                        \
    (unsigned short)((((unsigned short)(x)&0x00ff) << 8) | \
                     (((unsigned short)(x)&0xff00) >> 8))
endsnippet

snippet swap32 "swap 32bit"

#define BSWAP_32(x)                                         \
    (unsigned int)((((unsigned int)(x)&0xff000000) >> 24) | \
                   (((unsigned int)(x)&0x00ff0000) >> 8) |  \
                   (((unsigned int)(x)&0x0000ff00) << 8) |  \
                   (((unsigned int)(x)&0x000000ff) << 24))
endsnippet

snippet crc16_xmodem "crc16 xmodem"
/* CRC16 implementation according to CCITT standards.
 *
 * Note by @antirez: this is actually the XMODEM CRC 16 algorithm, using the
 * following parameters:
 *
 * Name                       : "XMODEM", also known as "ZMODEM", "CRC-16/ACORN"
 * Width                      : 16 bit
 * Poly                       : 1021 (That is actually x^16 + x^12 + x^5 + 1)
 * Initialization             : 0000
 * Reflect Input byte         : False
 * Reflect Output CRC         : False
 * Xor constant to output CRC : 0000
 * Output for "0x31 0x32"     : 20B5
 */
static const uint16_t crc16tab[256] = {
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,
    0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,
    0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,
    0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,
    0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,
    0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b,
    0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12,
    0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,
    0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,
    0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,
    0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,
    0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,
    0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,
    0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e,
    0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,
    0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,
    0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,
    0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,
    0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,
    0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9,
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0};

uint16_t crc16_xmodem(const char *buf, int len)
{
    int      counter;
    uint16_t crc = 0;
    for(counter = 0; counter < len; counter++)
        crc = (crc << 8) ^ crc16tab[((crc >> 8) ^ *buf++) & 0x00FF];
    return crc;
}
endsnippet

snippet crc8 "crc template"
/* CRC8 implementation according to CRC-8 standards.
 * Name                       : CRC-8
 * Width                      : 8 bit
 * Poly                       : 3D65 (That is actually x^8 + x^2 + x + 1)
 * Initialization             : 0000
 * Reflect Input byte         : False
 * Reflect Output CRC         : False
 * Xor constant to output CRC : 0000
 * Output for "0x31 0x32"     : 0x72
 */
uint8_t const crc8table[256] =
    {
        0x0, 0x7, 0xE, 0x9, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24,
        0x23, 0x2A, 0x2D, 0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62, 0x65, 0x48,
        0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D, 0xE0, 0xE7, 0xEE, 0xE9, 0xFC,
        0xFB, 0xF2, 0xF5, 0xD8, 0xDF, 0xD6, 0xD1, 0xC4, 0xC3, 0xCA, 0xCD, 0x90,
        0x97, 0x9E, 0x99, 0x8C, 0x8B, 0x82, 0x85, 0xA8, 0xAF, 0xA6, 0xA1, 0xB4,
        0xB3, 0xBA, 0xBD, 0xC7, 0xC0, 0xC9, 0xCE, 0xDB, 0xDC, 0xD5, 0xD2, 0xFF,
        0xF8, 0xF1, 0xF6, 0xE3, 0xE4, 0xED, 0xEA, 0xB7, 0xB0, 0xB9, 0xBE, 0xAB,
        0xAC, 0xA5, 0xA2, 0x8F, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9D, 0x9A, 0x27,
        0x20, 0x29, 0x2E, 0x3B, 0x3C, 0x35, 0x32, 0x1F, 0x18, 0x11, 0x16, 0x3,
        0x4, 0xD, 0xA, 0x57, 0x50, 0x59, 0x5E, 0x4B, 0x4C, 0x45, 0x42, 0x6F, 0x68,
        0x61, 0x66, 0x73, 0x74, 0x7D, 0x7A, 0x89, 0x8E, 0x87, 0x80, 0x95, 0x92,
        0x9B, 0x9C, 0xB1, 0xB6, 0xBF, 0xB8, 0xAD, 0xAA, 0xA3, 0xA4, 0xF9, 0xFE,
        0xF7, 0xF0, 0xE5, 0xE2, 0xEB, 0xEC, 0xC1, 0xC6, 0xCF, 0xC8, 0xDD, 0xDA,
        0xD3, 0xD4, 0x69, 0x6E, 0x67, 0x60, 0x75, 0x72, 0x7B, 0x7C, 0x51, 0x56,
        0x5F, 0x58, 0x4D, 0x4A, 0x43, 0x44, 0x19, 0x1E, 0x17, 0x10, 0x5, 0x2,
        0xB, 0xC, 0x21, 0x26, 0x2F, 0x28, 0x3D, 0x3A, 0x33, 0x34, 0x4E, 0x49,
        0x40, 0x47, 0x52, 0x55, 0x5C, 0x5B, 0x76, 0x71, 0x78, 0x7F, 0x6A, 0x6D,
        0x64, 0x63, 0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B, 0x6, 0x1,
        0x8, 0xF, 0x1A, 0x1D, 0x14, 0x13, 0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5,
        0xBC, 0xBB, 0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, 0xDE, 0xD9,
        0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD,
        0xF4, 0xF3};

uint8_t crc8(uint8_t const msg[], int nBytes)
{
    uint8_t crc;
    crc = 0;
    for(int i = 0; i < nBytes; i++)
    {
        crc = crc8table[crc ^ msg[i]];
    }
    return crc;
}
endsnippet
