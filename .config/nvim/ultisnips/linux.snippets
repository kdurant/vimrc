snippet user_kernel_module "simple user kernel module template" b
#include <linux/init.h>
#include <linux/module.h>

static int __init ${1:my_test}_init(void)
{
    printk("my first kernel module init\n");
    return 0;
}

static void __exit $1_exit(void)
{
    printk("googbye\n");
}

module_init($1_init);
module_exit($1_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("${2:Kdurant}");
MODULE_DESCRIPTION("${3:my test kernel module}");
MODULE_ALIAS("${4:mytest}");

// makefile
// obj-m += mytest.o
// BASEINCLUDE ?= /lib/modules/$(shell uname -r)/build
// all:
// 	make -C $(BASEINCLUDE) M=$(PWD) modules
// clean:
// 	make -C $(BASEINCLUDE) M=$(PWD) clean
// 	rm -f *.ko
endsnippet

snippet dev_drive_char "simple char device driver template" b
#include <linux/module.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/init.h>
#include <linux/uaccess.h>

// 设备驱动名字, 随意修改
#define DEMO_NAME "my_demo_dev"

static dev_t        dev;
static struct cdev *${1:demo_cdev};  // 字符设备指针
static signed       count = 1;

static int ${2:demodrv}_open(struct inode *inode, struct file *file)
{
    int major = MAJOR(inode->i_rdev);
    int minor = MINOR(inode->i_rdev);

    printk("%s: major = %d, minor = %d\n", __func__, major, minor);
    return 0;
}

static int $2_release(struct inode *inode, struct file *file)
{
    return 0;
}

static ssize_t $2_read(struct file *file, char __user *buf, size_t lbuf, loff_t *ppos)
{
    printk("%s enter\n", __func__);
    return 0;
}

static ssize_t $2_write(struct file *file, const char __user *buf, size_t count, loff_t *f_pos)
{
    printk("%s enter\n", __func__);
    return 0;
}

static const struct file_operations $2_fops =
    {
        .owner   = THIS_MODULE,
        .open    = $2_open,
        .release = $2_release,
        .read    = $2_read,
        .write   = $2_write};

static int __init ${3:simple_char}_init(void)
{
    int ret;
    ret = alloc_chrdev_region(&dev, 0, count, DEMO_NAME);
    if(ret)
    {
        printk("failed to allocate char device region");
        return ret;
    }

    $1 = cdev_alloc();
    if(!$1)
    {
        printk("cdev_alloc failed\n");
        goto unregister_chrdev;
    }

    cdev_init($1, &$2_fops);

    ret = cdev_add($1, dev, count);
    if(ret)
    {
        printk("cdev_add failed\n");
        goto cdev_fail;
    }

    printk("succeded register char device: %s\n", DEMO_NAME);
    printk("Major number = %d, minor number = %d\n", MAJOR(dev), MINOR(dev));
    return 0;

cdev_fail:
    cdev_del($1);

unregister_chrdev:
    unregister_chrdev_region(dev, count);

    return ret;
}

static void __exit $3_exit(void)
{
    printk("removing device\n");
    if($1)
        cdev_del($1);

    unregister_chrdev_region(dev, count);
}

module_init($3_init);
module_exit($3_exit);

MODULE_AUTHOR("Kdurant");
MODULE_LICENSE("GPL v2");
MODULE_DESCRIPTION("simple character device");

endsnippet
