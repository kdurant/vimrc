snippet utf     "file format"
# -*- coding:utf-8 -*-
endsnippet

snippet if "simple if"
if ${1:#condition}:
    ${2:#code}
endsnippet

snippet ei  "elif"
elif ${1:#condition}:
    ${2:#code}
endsnippet

snippet el  "else"
else:
    ${1:#code}
endsnippet

snippet wh  "while"
while ${1:#condition}:
    ${2:#code}
endsnippet

snippet for "for ... in ..."
for ${1:key} in ${2:dict}:
    ${3:#code}
endsnippet

snippet ?
${1} = ${2:value} if ${3:expr} else ${4:value}
endsnippet

snippet def "def func"
def ${1:function}(${2:parameter}):
    ${3:#code}
    return ${4:#value}
endsnippet

snippet try "try...except...else"
try:
    $1
except:
    $2
else:
    $3
endsnippet

snippet finally "try...finally"
try:
    $1
finally:
    $2
endsnippet

snippet init    "class initial"
def __init__(self, ${1:parameter}):
    ${3:self.name = parameter}
    return ${4:#value}
endsnippet

snippet class   "class template"
# 如果子类定义了构造函数，而没有调用父类构造函数
# 将不具备父类的所有属性（包括使用到父类属性的父类方法）
class ${1:name} (${2:object}):
    #def __init__(self, name):  #构造方法
        #object.__init__(self)  # 方法一
        #super($1, self).__init__() # 方法二
        #self.name = name

    $3
endsnippet

snippet lambda
lambda ${1:var} : ${2:expression}
endsnippet

snippet im
import ${1:module_name}
endsnippet

snippet from    "import format"
from ${1:module} import ${2:variable}
endsnippet

snippet main
if __name__ == '__main__':
    ${1:main()}
endsnippet
###################################function#####################################

snippet open    "open file"
${1:f} = open(${2:file_name}, 'r')
#for each_line in f.readlines():
    #print (each_line)
$1.close()
endsnippet

snippet write   "write file"
${1:f} = open(${2:file_name}, 'w')
$1.write(string)
$1.close()
endsnippet

snippet tk
from tkinter import ${1:Label}
#widget.pack()
#widget.mainloop()
endsnippet


#########################pyqt5#########################
snippet pyqt_widget "QWidget"
#-*- coding:utf-8 -*-
#from PyQt5.QtGui import *
from PyQt5.QtCore import pyqtSignal, pyqtSlot
from PyQt5.QtWidgets import QApplication, QWidget, QTextEdit, QVBoxLayout

class PyQt5_Temp(QWidget):
    signalTemp = pyqtSignal([str])
    #self.signalTemp.emit('temp')
    def __init__(self):
        super(PyQt5_Temp, self).__init__()
        self.initUI()

        #self.tempBtn.clicked.connect(self.tempSlot)

    def initUI(self):
        self.text = QTextEdit()

        mainLayout = QVBoxLayout()
        mainLayout.addWidget(self.text)

        self.setLayout(mainLayout)

        self.setWindowTitle('PyQt5_Temp')

    @pyqtSlot()
    def tempSlot(self):
        #code
        return #value

if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)

    ui = PyQt5_Temp()
    ui.show()
    #ui.setStyleSheet(style)
    sys.exit(app.exec_())
endsnippet

snippet tcp_server "simple tcp server example" b
#-*- coding: UTF-8 -*- 
import argparse
import socket

parser = argparse.ArgumentParser(description="simple tcp server program")
parser.add_argument("--ip", default="127.0.0.1", help="tcp server ip address")
parser.add_argument("--port", default=8888, type=int, help="tcp server port")
args = parser.parse_args()

server = socket.socket()
server.bind((args.ip, args.port))
server.listen(5)
while True:
    print ("wait for new tcp client to connect...")
    connection, addr = server.accept()
    print ('new client addr is : {0}'.format(addr))
    
    while True:
        data = connection.recv(1024)
        if not data:
            print ("client actively disconnects the socket")
            break
        print(data)
    connection.close() 
endsnippet

snippet tcp_client "simple tcp client example" b
#-*- coding: UTF-8 -*-
import argparse
import socket
import time

parser = argparse.ArgumentParser(description="simple tcp client program")
parser.add_argument("--ip", default="127.0.0.1", help="remote tcp server ip address")
parser.add_argument("--port", default=8888, type=int, help="remote tcp client port")
parser.add_argument("-t", "--timeout", default=0, type=int, help="tcp client timeout")
args = parser.parse_args()

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect((args.ip, args.port))


if args.timeout == 0:
    client.settimeout(None)
else:
    client.settimeout(args.timeout)

while True:
    try:
        data = client.recv(2048)

    except socket.timeout:
        print("There are no data in {0}s. Close socket.".format(args.timeout))
        client.close()
        break;
endsnippet


snippet plot "simple plot template" b
fig, ax = plt.subplots(2, 1, sharex=True)

ax[0].plot(ch0, label="ch0")
ax[0].set_title("title")
ax[0].set_xlabel("x-label", fontsize=20)
ax[0].set_ylabel("y-label", fontsize=15)
ax[0].text(0, ch0.mean(), "text", fontsize=20)
ax[0].annotate('annotate', xy=(x, y), xytext=(x+1, y+1), arrowprops=dict(facecolor='black', shrink=0.05))
ax[0].grid(True)
ax[0].legend()
plt.show()
endsnippet
