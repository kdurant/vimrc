extends c
extends qt

snippet class "class template" b
class ${1:Name}
{
private:

public:
    $1() = default;
    $1(const $1& cpy);
    $1& operator=(const $1& assign)
    {
        //this->m_a = as.m_a;
	return *this;
    };
    ~$1();

    // 类内声明，类外定义，非成员函数，但可以直接访问类私有变量
    // friend void func($1 & data);  
};
endsnippet

snippet templatef "function template"
template <typename T>
${1:void Swap(T &a, T&b);}
endsnippet

snippet vector "vector template"
vector<${1:type}> ${2:name};
endsnippet

snippet iterator "contains iterator"
${1:array<int, 4>}::iterator ${2:p};
endsnippet

snippet lambda "lambda function template"
[] (${1:param}) -> ${2:return_type} { ${3:code}}
endsnippet

snippet point "智能指针"
std::${1:unique}_ptr<std::${2:type}> ${point_name} {new std::$2 {"example"} };
endsnippet

snippet solution "leetcode cpp solution template" b
#include <iostream>
#include <vector>

using namespace std;

class Solution
{
public:
    ${1:solution method}
};

int main(int argc, char* argv[])
{
    Solution    s;
    // test code
    return 0;
}

endsnippet
